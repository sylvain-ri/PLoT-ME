#!/usr/bin/env python3
"""
First attempt to add test to project, using pytest
python3 -m pytest -v
python3 -m pytest -v --color=yes --log-level=5 | less -r

Testing both plot_me.bio and plot_me.cython_module.cyt_ext
"""
from plot_me import bio
from plot_me.cython_module import cyt_ext
from plot_me.tools import init_logger, scale_df_by_length

import logging
import numpy as np
from sklearn.cluster import MiniBatchKMeans
import pytest


_ = init_logger(__package__)
logger = logging.getLogger(__name__)
cyt_ext.set_verbosity(5)

# ######################    TESTING COMBINATIONS    ######################
combinations = [
    (2, [ "AA",  "AC",  "AG",  "AT",  "CA",  "CC",  "CG",  "CT",  "GA",  "GC",  "GG",  "GT",  "TA",  "TC",  "TG",  "TT", ]),
    (3, ["AAA", "AAC", "AAG", "AAT", "ACA", "ACC", "ACG", "ACT", "AGA", "AGC", "AGG", "AGT", "ATA", "ATC", "ATG", "ATT",
         "CAA", "CAC", "CAG", "CAT", "CCA", "CCC", "CCG", "CCT", "CGA", "CGC", "CGG", "CGT", "CTA", "CTC", "CTG", "CTT",
         "GAA", "GAC", "GAG", "GAT", "GCA", "GCC", "GCG", "GCT", "GGA", "GGC", "GGG", "GGT", "GTA", "GTC", "GTG", "GTT",
         "TAA", "TAC", "TAG", "TAT", "TCA", "TCC", "TCG", "TCT", "TGA", "TGC", "TGG", "TGT", "TTA", "TTC", "TTG", "TTT"]),
]
@pytest.mark.parametrize("k, list_combinations", combinations)
def test_bio_combinations(k, list_combinations):
    assert bio.combinations(k) == list_combinations

@pytest.mark.parametrize("k, list_combinations", combinations)
def test_cyt_combinations(k, list_combinations):
    assert cyt_ext.combinations(k) == list_combinations

# ######################    TESTING REVERSE COMPLEMENT    ######################
codon_reversecomplement = [
    ("AACG", "CGTT"),
    ("TGCA", "TGCA"),
    ("TGC", "GCA"),
    ("TTCCA", "TGGAA")]

@pytest.mark.parametrize("codon, reverse_complement", codon_reversecomplement)
def test_bio_reverse_complement_string(codon, reverse_complement):
    assert bio.reverse_complement_string(codon) == reverse_complement

@pytest.mark.parametrize("codon, reverse_complement", codon_reversecomplement)
def test_cyt_reverse_complement_string(codon, reverse_complement):
    assert cyt_ext.reverse_complement_string(codon) == reverse_complement


# ######################    TESTING K-MER ADDRESS    ######################
kmer_addresses = [
    ("AAAA",    0),
    ("TT",     15),
    ("AACG",    6),
    ("TGCA",  228),
    ("TGC",    57),
    ("TTCCA", 980)]

@pytest.mark.parametrize("k_mer, address", kmer_addresses)
def test_bio_codon_addr(k_mer, address):
    assert bio.codon_addr(k_mer) == address

@pytest.mark.parametrize("k_mer, address", kmer_addresses)
def test_cyt_codon_addr(k_mer, address):
    assert cyt_ext.codon_addr(k_mer) == address


# ######################    TESTING DIMENSION OF AN ARRAY OF COMBINED K-MERS    ######################
expected_array_dimension_for_a_given_k = [
    (2, 10),
    (3, 32),
    (4, 136),
    (5, 512), ]

@pytest.mark.parametrize("k, combined_dim", expected_array_dimension_for_a_given_k)
def test_bio_dim_combined_codons(k, combined_dim):
    assert bio.n_dim_rc_combined(k) == combined_dim

@pytest.mark.parametrize("k, combined_dim", expected_array_dimension_for_a_given_k)
def test_cyt_dim_combined_codons(k, combined_dim):
    assert cyt_ext.n_dim_rc_combined(k) == combined_dim
    cyt_ext.init_variables(k)
    assert cyt_ext.get_dim_combined_codons() == combined_dim


# ######################    TESTING INITIALIZATION OF CYTHON'S VARIABLES    ######################
# Testing if the initialization of values work in cyt_ext
# The arrays are initialized to speed up methods
initialized_data = [
    # k, dict mapping of k-mers to their reverse complement if they Should be combined
    (2,  {"AA": "TT", "AC": "GT", "AG": "CT", "AT": "AT", "CA": "TG", "CC": "GG", "CG": "CG", "CT": "AG",
          "GA": "TC", "GC": "GC", "GG": "CC", "GT": "AC", "TA": "TA", "TC": "GA", "TG": "CA", "TT": "AA", },
         # dic with only the kept k-mers
         {"AA": 0., "AC": 0., "AG": 0., "AT": 0., "CA": 0., "CC": 0., "CG": 0.,
          "GA": 0., "GC": 0., "TA": 0., },
         # mapping of array indexes, for the forward strand, FROM where it should be added
         # mapping of array indexes, for the forward strand, to where it should be added
         # AA, AC, AG, AT, CA, CC, CG, GA, GC, TA
         [  0,  1,  2,  3,  4,  5,  6,  8,  9, 12, ],
         # mapping of array indexes, for the reverse complement, to where it should be added
         # TT, GT, CT, AT, TG, GG, CG, TC, GC, TA
         [ 15, 11,  7,  3, 14, 10,  6, 13,  9, 12], ),
]

@pytest.mark.parametrize("k, origin_target, template_combined, map_forward_adr, map_rc_adr", initialized_data)
def test_bio_table_rev_comp_to_forward_strand(k, origin_target, template_combined, map_forward_adr, map_rc_adr):
    assert bio.table_forward_strand_to_rev_comp(k) == origin_target

@pytest.mark.parametrize("k, origin_target, template_combined, map_forward_adr, map_rc_adr", initialized_data)
def test_cyt_init_variables(k, origin_target, template_combined, map_forward_adr, map_rc_adr):
    cyt_ext.init_variables(k)
    assert cyt_ext.get_d_codons_orig_target()       == origin_target
    assert cyt_ext.get_d_template_counts_combined() == template_combined
    np.testing.assert_array_equal(cyt_ext.get_ar_codons_forward_addr(),
                                         np.array(map_forward_adr, dtype=np.float32))
    np.testing.assert_array_equal(cyt_ext.get_ar_codons_rev_comp_addr(),
                                         np.array(map_rc_adr, dtype=np.float32))


def test_codons_without_rev_comp():
    assert bio.codons_without_rev_comp(2) == ["AA", "AC", "AG", "AT", "CA", "CC", "CG", "GA", "GC", "TA", ]


# #############   KMER COUNTER   #######################
seq_w_expected_counts = [
    {'k':2, 'seq': "AAAACCCCGGGGTTTT",
     'counts': {"AA": 3., "AC": 1., "AG": 0., "AT": 0., "CA": 0., "CC": 3., "CG": 1., "CT": 0.,
                "GA": 0., "GC": 0., "GG": 3., "GT": 1., "TA": 0., "TC": 0., "TG": 0., "TT": 3., }, },
    {'k':3, 'seq': "AAAACCCCGGGGTTTT",
     'counts': {"AAA":2., "AAC":1., "AAG":0., "AAT":0., "ACA":0., "ACC":1., "ACG":0., "ACT":0., "AGA":0., "AGC":0., "AGG":0., "AGT":0., "ATA":0., "ATC":0., "ATG":0., "ATT":0.,
                "CAA":0., "CAC":0., "CAG":0., "CAT":0., "CCA":0., "CCC":2., "CCG":1., "CCT":0., "CGA":0., "CGC":0., "CGG":1., "CGT":0., "CTA":0., "CTC":0., "CTG":0., "CTT":0.,
                "GAA":0., "GAC":0., "GAG":0., "GAT":0., "GCA":0., "GCC":0., "GCG":0., "GCT":0., "GGA":0., "GGC":0., "GGG":2., "GGT":1., "GTA":0., "GTC":0., "GTG":0., "GTT":1.,
                "TAA":0., "TAC":0., "TAG":0., "TAT":0., "TCA":0., "TCC":0., "TCG":0., "TCT":0., "TGA":0., "TGC":0., "TGG":0., "TGT":0., "TTA":0., "TTC":0., "TTG":0., "TTT":2.,
                }, },
]
seq_w_expected_counts_tuples = []
for row in seq_w_expected_counts:
    as_np_array = np.fromiter(row['counts'].values(), dtype=np.float32)
    seq_w_expected_counts_tuples.append((row['k'], row['seq'], row['counts'], as_np_array))

@pytest.mark.parametrize("k, seq, counts, np_counts", seq_w_expected_counts_tuples)
def test_bio_seq_count_kmer(k, seq, counts, np_counts):
    assert bio.seq_count_kmer(seq, k=k) == counts

@pytest.mark.parametrize("k, seq, counts, np_counts", seq_w_expected_counts_tuples)
def test_cyt_seq_count_kmer_return_array(k, seq, counts, np_counts):
    cyt_ext.init_variables(k)
    with pytest.raises(TypeError):
        assert cyt_ext.kmer_counter(4568, k=k, dictionary=True)  == counts
    cyt_counts = cyt_ext.kmer_counter(str.encode(seq), k=k, dictionary=False, combine=False)
    np.testing.assert_array_equal(cyt_counts, np_counts)

@pytest.mark.parametrize("k, seq, counts, np_counts", seq_w_expected_counts_tuples)
def test_cyt_seq_count_kmer_return_dict(k, seq, counts, np_counts):
    cyt_ext.init_variables(k)
    assert cyt_ext.kmer_counter(str.encode(seq), k=k, dictionary=True, combine=False)  == counts


# ######################    TESTING COMBINATION FOR FORWARD AND REVERSE COMPLEMENT    ######################
# Combining forward and reverse into one array / list
counts_all_to_combined = [
    ({"AA":2., "AC": 4., "AG": 6., "AT":1., "CA":2., "CC": 3., "CG":4., "CT":5.,
      "GA":5., "GC": 6., "GG": 7., "GT":8., "TA":9., "TC": 1., "TG":2., "TT":3., },
     {"AA":5., "AC":12., "AG":11., "AT":1., "CA":4., "CC":10., "CG":4.,
      "GA":6., "GC": 6., "TA": 9., },
     2),
]
np_counts_all_to_combined = []
for item in counts_all_to_combined:
    entry = (np.fromiter(item[0].values(), dtype=np.float32),
             np.fromiter(item[1].values(), dtype=np.float32),
             item[2])
    np_counts_all_to_combined.append(entry)

@pytest.mark.parametrize("dict_counts, dict_combined, k", counts_all_to_combined)
def test_bio_combine_forward_rv(dict_counts, dict_combined, k):
    assert bio.combine_counts_forward_w_rc(dict_counts, k) == dict_combined

@pytest.mark.parametrize("array_counts, array_combined, k", np_counts_all_to_combined)
def test_cyt_combine_counts_with_reverse_complement(array_counts, array_combined, k):
    cyt_ext.init_variables(k)
    np.testing.assert_array_equal(cyt_ext.combine_counts_forward_w_rc(array_counts), array_combined)


# ######################    TESTING WHOLE COUNTING: KMER AND COMBINATION    ######################
# Count k-mers in sequence And combine them
seq_combined_k_mers = [
    (2, "GGGGGGGGGGGGGGGGGGGGG",
     {"AA": 0., "AC": 0., "AG": 0., "AT": 0., "CA": 0., "CC": 20., "CG": 0.,
      "GA": 0., "GC": 0., "TA": 0., }),
    (2, "TTTTTTTTTTTGGGGCCC",
     {"AA":10., "AC": 0., "AG": 0., "AT": 0., "CA": 1., "CC": 5., "CG": 0.,
      "GA": 0., "GC": 1., "TA": 0., }),
    (3, "AAAAAAACCCCCCAAAGGGGGTTTTTT",
     {"AAA":10., "AAC": 2., "AAG": 1., "AAT": 0., "ACA": 0., "ACC": 2., "ACG": 0., "ACT": 0., "AGA": 0., "AGC": 0., "AGG": 1., "ATA": 0., "ATC": 0., "ATG": 0.,
      "CAA": 1., "CAC": 0., "CAG": 0., "CCA": 1., "CCC": 7., "CCG": 0., "CGA": 0., "CGC": 0., "CTA": 0., "CTC": 0.,
      "GAA": 0., "GAC": 0., "GCA": 0., "GCC": 0., "GGA": 0., "GTA": 0., "TAA": 0., "TCA": 0., }),
    (3, "TTTTTTTTTTTGGGGCCCGAAT",
     {"AAA": 9., "AAC": 0., "AAG": 0., "AAT": 1., "ACA": 0., "ACC": 0., "ACG": 0., "ACT": 0., "AGA": 0., "AGC": 0., "AGG": 0., "ATA": 0., "ATC": 0., "ATG": 0.,
      "CAA": 1., "CAC": 0., "CAG": 0., "CCA": 1., "CCC": 3., "CCG": 1., "CGA": 1., "CGC": 0., "CTA": 0., "CTC": 0.,
      "GAA": 1., "GAC": 0., "GCA": 0., "GCC": 2., "GGA": 0., "GTA": 0., "TAA": 0., "TCA": 0., })
]
seq_combined_k_mers_array = []
for item in seq_combined_k_mers:
    entry = (item[0], item[1], np.fromiter(item[2].values(), dtype=np.float32), )
    seq_combined_k_mers_array.append(entry)

@pytest.mark.parametrize("k, seq, counts", seq_combined_k_mers)
def test_bio_count_and_combine_seq(k, seq, counts):
    assert bio.combine_counts_forward_w_rc(bio.seq_count_kmer(seq, k=k), k) == counts

@pytest.mark.parametrize("k, seq, counts", seq_combined_k_mers)
def test_cyt_count_and_combine_seq_dicts(k, seq, counts):
    cyt_ext.init_variables(k)
    np.testing.assert_array_equal(counts, cyt_ext.kmer_counter(str.encode(seq), k=k, dictionary=True, combine=True))

@pytest.mark.parametrize("k, seq, counts", seq_combined_k_mers_array)
def test_cyt_count_and_combine_seq_arrays(k, seq, counts):
    cyt_ext.init_variables(k)
    np.testing.assert_array_equal(counts, cyt_ext.kmer_counter(str.encode(seq), k=k, dictionary=False, combine=True))


avg = 10./(11.-2.+1.)
scaling_counts = [
    (2, 11,
     #        AA, AC, AG, AT, CA, CC, CG, GA, GC, TA
     np.array([  1,  1,  1,  1,  1,  1,  1,  1,  1,  1], dtype=np.float32),
     np.array([avg,avg,avg,avg,avg,avg,avg,avg,avg,avg], dtype=np.float32), ),
    (2, 11,
     #        AA, AC, AG, AT, CA, CC, CG, GA, GC, TA
     np.array([0,  0,  0,  0,      10.            ,  0,  0,  0,  0,  0], dtype=np.float32),
     np.array([0,  0,  0,  0, 10 * 10./(11.-2.+1.),  0,  0,  0,  0,  0], dtype=np.float32), ),
    (2, 30,
     #        AA, AC, AG, AT, CA, CC, CG, GA, GC, TA
     np.array([2,  2,  3,  1,  4,  5,  2,  1,  3,  6], dtype=np.float32),
     np.array([0.689655172, 0.689655172, 1.034482759, 0.344827586, 1.379310345, 1.724137931, 0.689655172, 0.344827586, 1.034482759, 2.068965517], dtype=np.float32), ),
    (2, 102,
     #        AA, AC, AG, AT, CA, CC, CG, GA, GC, TA
     np.array([2,  8,  3,  7, 10,  1,  9, 20, 40,  1], dtype=np.float32),
     np.array([0.198019802, 0.792079208, 0.297029703, 0.693069307, 0.99009901, 0.099009901, 0.891089109, 1.98019802, 3.96039604, 0.099009901], dtype=np.float32), ),
    (3, 26,
     #
     #        AAA,AAC,AAG,        AAT,ACA,ACC,ACG,ACT,AGA,        AGC,AGG,ATA,ATC,ATG,CAA,CAC,CAG,CCA,CCC,        CCG,CGA,CGC,CTA,CTC,GAA,        GAC,GCA,GCC,GGA,        GTA,TAA,TCA
     np.array([ 0, 0, 0,          10, 0, 0, 0, 0, 0,           4, 0, 0, 0, 0, 0, 0, 0, 0, 0,           7, 0, 0, 0, 0, 0,           2, 0, 0, 0,           1, 0, 0], dtype=np.float32),
     np.array([ 0, 0, 0, 13.33333333, 0, 0, 0, 0, 0, 5.333333333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9.333333333, 0, 0, 0, 0, 0, 2.666666667, 0, 0, 0, 1.333333333, 0, 0], dtype=np.float32), ),
]

@pytest.mark.parametrize("k, length, counts_unscaled, scaled", scaling_counts)
def test_tools_scale_df_by_length(k, length, counts_unscaled, scaled):
    # Testing plot_me.tools FIRST because Cython modifies the arrays INPLACE
    after_scaling = scale_df_by_length(counts_unscaled, kmer_cols=counts_unscaled, k=k, w=length, single_row=True)  # Scaling in place
    np.testing.assert_array_almost_equal(scaled, after_scaling, decimal=3)

@pytest.mark.parametrize("k, length, counts_unscaled, scaled", scaling_counts)
def test_cyt_scale_counts(k, length, counts_unscaled, scaled):
    # Testing plot_me.tools FIRST because Cython modifies the arrays INPLACE
    cyt_ext.init_variables(k)
    cyt_ext.scale_counts(counts_unscaled, k, length)  # Scaling in place
    np.testing.assert_array_almost_equal(scaled, counts_unscaled, decimal=3)


model_k4_b10 = np.array([[0.552431, 0.669278, 0.606861, 0.572637, 1.140612, 1.228442, 1.539976, 0.887560, 0.953504, 1.761001, 1.676094, 0.664680, 0.379086, 0.797770, 0.771335, 0.231622, 0.785833, 0.966322, 1.398794, 0.972288, 2.307566, 1.616805, 3.131124, 1.805051, 1.869642, 3.282192, 2.290288, 0.634671, 0.295337, 0.615064, 1.211042, 0.943492, 0.947659, 0.511834, 1.079379, 2.619893, 2.694913, 3.921430, 0.842240, 1.525313, 3.558372, 1.573882, 0.401401, 0.813947, 0.683209, 0.189051, 0.562776, 0.510180, 0.193778, 1.654937, 1.715941, 3.162585, 1.266979, 2.508573, 2.189767, 0.163171, 0.808112, 0.867512, 0.513086, 1.868391, 1.938646, 0.878227, 3.717664, 3.010107, 1.203188, 6.059922, 4.514376, 0.454892, 3.085021, 1.313184, 1.212305, 2.876440, 5.255852, 2.189959, 1.567991, 3.485703, 3.654866, 6.871336, 2.923895, 0.487332, 1.784831, 2.543123, 4.060906, 3.137275, 3.918410, 9.336601, 4.280437, 1.979134, 10.068347, 0.982112, 3.179281, 0.071276, 1.046456, 0.063515, 0.904162, 1.299850, 1.664721, 4.669163, 0.145346, 2.364440, 1.189340, 2.089620, 1.503352, 2.980166, 0.970465, 2.482757, 0.643187, 1.543431, 2.060324, 3.136254, 4.990717, 4.546362, 3.964550, 5.809599, 0.617051, 1.717782, 1.903302, 3.628629, 3.751817, 1.086377, 0.934295, 0.289483, 0.510054, 1.564869, 1.310203, 0.169359, 0.145659, 0.601033, 0.355225, 0.086202, 1.129167, 2.046086, 1.707409, 1.247128, 1.103694, 0.036862],
                         [3.610377, 2.594266, 2.434206, 2.502189, 2.193205, 2.173818, 2.502967, 1.564586, 1.838080, 2.310360, 1.680075, 1.322575, 1.944029, 2.172572, 2.151438, 0.907067, 1.713762, 1.242553, 1.868928, 1.482967, 2.446791, 1.467232, 2.792192, 1.515009, 1.651283, 2.737884, 2.179643, 0.752969, 0.646964, 1.044995, 2.050518, 1.958820, 1.258210, 1.231512, 1.716006, 2.518809, 2.176153, 2.990848, 0.830372, 1.389637, 2.092801, 1.214461, 1.030888, 1.070751, 1.398841, 1.998214, 1.409250, 1.009817, 0.913043, 2.825466, 2.086386, 2.695094, 2.197357, 2.376884, 2.187540, 1.640893, 1.832220, 2.106871, 2.573545, 2.271630, 1.340788, 1.450422, 2.615637, 1.890922, 2.345291, 4.213052, 2.839670, 1.363808, 2.897450, 0.916029, 1.659358, 2.066774, 3.521179, 1.598165, 1.218360, 2.072753, 2.019439, 3.458398, 1.534913, 0.518911, 1.173251, 2.191292, 2.040637, 1.348032, 2.797604, 4.072183, 1.600429, 2.086910, 3.775465, 1.488090, 2.192772, 0.708188, 0.996168, 0.089181, 1.423521, 1.292858, 2.695808, 3.362605, 0.971773, 2.404337, 2.924314, 1.996873, 1.567316, 1.663650, 1.357445, 1.720250, 2.040138, 1.106395, 2.803509, 2.049597, 3.445530, 2.013780, 2.760786, 2.052239, 1.102908, 2.301848, 1.144150, 3.111997, 0.983613, 1.404347, 1.768139, 1.689179, 0.644886, 2.051493, 1.996912, 1.571828, 2.032252, 1.097254, 0.623754, 0.447697, 2.116215, 1.944348, 0.921776, 2.705804, 1.082086, 0.910578],
                         [8.782452, 3.414797, 4.326458, 6.672869, 3.300147, 1.725115, 1.623466, 2.620764, 3.687316, 2.416155, 1.915891, 2.852618, 5.391038, 3.158647, 3.526512, 2.951268, 3.228429, 1.221761, 1.595228, 2.320688, 2.126241, 0.764921, 0.853794, 1.555391, 1.375889, 0.870725, 0.762003, 0.589239, 1.840774, 1.161436, 1.467807, 3.726945, 1.095373, 1.486457, 2.641523, 2.362237, 1.097281, 1.103998, 1.011836, 1.685794, 0.945577, 0.851867, 2.249885, 1.056622, 1.395348, 5.069792, 2.320362, 2.146120, 2.285029, 3.470524, 1.676538, 1.529511, 3.260611, 1.900846, 2.079707, 4.868718, 2.879626, 3.557566, 4.040391, 2.007650, 2.013426, 1.329150, 1.305247, 0.732620, 1.655403, 1.502173, 1.093836, 2.405577, 2.151932, 0.738884, 2.272530, 1.046478, 1.123537, 1.034791, 0.585851, 0.388796, 0.720697, 0.630659, 0.228981, 1.178197, 0.850711, 1.390190, 0.635322, 0.583700, 0.926462, 0.690137, 0.193247, 0.767000, 0.561726, 1.140153, 0.690856, 2.519446, 1.279150, 0.452076, 1.386819, 1.001713, 1.642143, 1.358301, 2.105584, 2.426530, 4.177627, 1.550589, 1.296798, 0.686748, 1.411317, 1.035223, 2.769869, 0.618827, 2.487998, 1.002686, 1.335636, 0.560027, 0.964852, 0.320437, 1.633638, 2.081087, 0.669553, 1.211316, 0.202110, 0.950503, 1.583240, 2.658472, 0.577667, 1.330778, 1.491435, 2.296476, 6.195179, 2.440022, 2.196259, 1.769922, 3.630066, 2.025604, 0.538633, 3.836126, 1.124909, 2.609098],
                         [0.167408, 0.322787, 0.275583, 0.173540, 0.755536, 1.093002, 1.402739, 0.692356, 0.828988, 1.091454, 1.308254, 0.538285, 0.106918, 0.411564, 0.282209, 0.079121, 0.527825, 1.197535, 1.004696, 0.754079, 2.027886, 2.379741, 4.384760, 1.963210, 2.849523, 3.219161, 3.405660, 0.927758, 0.248912, 1.076468, 0.950560, 0.850464, 1.185436, 0.774284, 1.011112, 2.041523, 2.491430, 3.255830, 0.822315, 2.024192, 2.712896, 1.903391, 0.417400, 1.005300, 0.699151, 0.065579, 0.241922, 0.198329, 0.061545, 1.242510, 1.643648, 2.720967, 1.031049, 1.335949, 1.303661, 0.062853, 0.457730, 0.264816, 0.225589, 1.330775, 1.146755, 0.848334, 4.614403, 3.374949, 1.073414, 4.141049, 3.255174, 0.181834, 2.449721, 0.755490, 0.782535, 3.217890, 3.524411, 1.903575, 2.982717, 5.978860, 4.646446, 8.136131, 3.929412, 0.381467, 3.658787, 2.216775, 6.011673, 5.263645, 2.936776, 9.176562, 4.203886, 3.349590, 10.333849, 1.123017, 5.429143, 0.052368, 0.994420, 0.052386, 1.141878, 2.955800, 1.355531, 3.535558, 0.081624, 2.263003, 0.490438, 2.172731, 1.462469, 4.259292, 1.594980, 3.805329, 0.289941, 1.733490, 0.933548, 3.235081, 3.062014, 5.352183, 4.559864, 3.930869, 0.395609, 1.418659, 3.244513, 2.817090, 3.487956, 2.053860, 0.788878, 0.160478, 0.675128, 1.714558, 1.886339, 0.117349, 0.055637, 0.417794, 0.323887, 0.025114, 0.724035, 1.835013, 2.078596, 0.898010, 0.622377, 0.019518],
                         [14.005812, 3.221807, 4.966933, 9.852799, 3.063732, 1.270148, 0.656823, 2.931938, 4.311091, 2.088968, 1.769039, 3.137282, 8.349198, 2.888259, 3.381812, 3.965155, 3.130302, 0.923458, 1.215989, 2.401376, 1.568075, 0.513849, 0.298053, 1.402589, 0.604851, 0.350866, 0.280405, 0.219865, 2.275147, 1.071174, 1.031839, 4.346471, 0.819667, 1.498433, 3.167386, 2.104876, 0.713302, 0.449161, 1.065509, 1.833229, 0.642294, 0.627550, 2.660962, 0.758094, 1.164465, 8.123954, 2.576866, 3.096155, 4.241640, 3.302461, 1.432028, 0.667533, 3.318194, 1.546153, 1.780430, 6.898980, 2.847641, 2.950341, 4.216682, 1.394123, 1.668055, 1.073133, 0.835263, 0.255463, 1.274047, 0.927372, 0.771783, 2.879318, 1.780686, 0.502139, 1.787917, 0.728245, 0.681985, 0.698238, 0.365399, 0.130031, 0.259787, 0.242984, 0.068545, 1.270155, 0.694743, 0.651098, 0.202761, 0.228199, 0.385809, 0.247387, 0.045441, 0.313215, 0.178956, 0.519129, 0.244431, 2.901834, 1.214581, 0.454991, 1.093775, 0.996998, 1.155178, 0.951924, 2.524309, 2.147173, 4.389653, 1.165478, 0.847177, 0.376866, 1.302956, 0.748556, 3.151375, 0.374570, 2.000200, 0.644882, 0.748346, 0.286496, 0.386720, 0.096341, 1.633429, 1.896913, 0.439905, 0.729278, 0.083061, 0.655467, 1.300278, 2.569373, 0.403312, 0.764250, 1.031715, 2.141231, 9.433473, 2.687091, 2.943862, 3.950145, 3.310814, 1.963937, 0.249121, 3.655454, 0.961615, 3.701379],
                         [6.956764, 3.245942, 3.881020, 4.757999, 2.863786, 1.999341, 1.900357, 2.189545, 3.248176, 2.825855, 2.177227, 2.331308, 3.591126, 2.944818, 3.006124, 1.982700, 2.728130, 1.273626, 1.853355, 1.948331, 2.180511, 1.071412, 1.429941, 1.577845, 1.554785, 1.221038, 1.330969, 0.613901, 1.303326, 1.247753, 1.682997, 3.206693, 1.304397, 1.571224, 2.295328, 2.539398, 1.683809, 1.603984, 1.106140, 1.821746, 1.443010, 1.109842, 1.659531, 1.261136, 1.455157, 3.436300, 1.893302, 1.677393, 1.514261, 3.329801, 1.934594, 1.999686, 2.935925, 2.048863, 2.197826, 3.022458, 2.587253, 3.139798, 3.866244, 2.080873, 2.300285, 1.494730, 1.596041, 1.051586, 1.979218, 2.281794, 1.607491, 1.969762, 2.413758, 0.870638, 2.472829, 1.304532, 1.583515, 1.345454, 0.873616, 0.909695, 1.293970, 1.363536, 0.574623, 1.028906, 1.138815, 1.726923, 1.042119, 0.925102, 1.388463, 1.357614, 0.425277, 1.366469, 1.431625, 1.251555, 1.131087, 1.789321, 1.147670, 0.385893, 1.651510, 1.266869, 2.158915, 1.955709, 1.787589, 2.613698, 3.870889, 1.778688, 1.622677, 1.061076, 1.584254, 1.443874, 2.427444, 0.886692, 2.737792, 1.289958, 1.969771, 0.988329, 1.410034, 0.602997, 1.487944, 2.400451, 0.954501, 1.903431, 0.443930, 1.305261, 1.603246, 2.151222, 0.572185, 1.774968, 1.729407, 1.847546, 4.147009, 1.822227, 1.566005, 1.023589, 3.448484, 2.062944, 0.717514, 3.516444, 1.100515, 1.713885],
                         [1.864625, 1.604584, 1.567479, 1.257311, 1.598295, 1.767453, 1.934302, 1.140380, 1.359871, 2.139539, 1.818322, 0.948173, 0.948567, 1.410970, 1.359159, 0.439003, 1.175234, 1.103079, 1.697011, 1.136717, 2.407124, 1.871304, 3.051892, 1.724225, 1.606066, 2.778090, 2.143635, 0.629498, 0.444503, 0.880216, 1.633348, 1.360700, 1.181687, 1.015373, 1.477672, 2.764900, 2.676140, 3.610315, 0.988110, 1.474200, 2.907239, 1.655978, 0.664339, 0.980107, 1.121396, 0.943339, 0.894520, 0.816148, 0.498766, 2.396795, 1.989500, 3.036845, 1.756839, 2.325343, 2.212921, 0.681359, 1.219824, 1.438195, 1.570272, 2.154779, 1.803938, 1.219634, 3.520272, 2.181885, 1.941088, 5.613380, 3.758534, 0.855223, 3.027094, 1.095174, 1.599863, 2.598019, 4.445314, 1.999995, 1.681835, 2.866919, 2.790026, 4.873196, 2.190677, 0.514179, 1.670612, 2.300501, 2.862835, 2.169576, 3.180629, 6.292175, 2.288135, 2.007274, 6.262090, 1.097714, 2.572897, 0.328859, 1.023021, 0.086660, 1.424108, 1.568257, 2.452273, 4.351781, 0.517862, 2.376653, 1.968438, 1.929026, 1.530990, 2.395614, 1.247436, 2.379037, 1.396161, 1.533292, 2.466038, 2.533196, 4.411466, 3.268181, 3.392612, 3.307767, 0.895599, 1.894765, 1.449939, 3.482276, 2.199187, 1.383389, 1.371213, 0.864736, 0.557055, 1.985129, 1.808905, 0.752074, 0.890166, 0.763110, 0.487047, 0.225794, 1.726032, 2.037561, 1.290521, 1.937996, 1.124266, 0.352256],
                         [1.152768, 1.157867, 1.253194, 1.015073, 1.272504, 1.530239, 1.949711, 1.019647, 1.590212, 2.210250, 2.054027, 0.912096, 0.619061, 1.340619, 1.199045, 0.413231, 1.116481, 1.170719, 1.317032, 1.249162, 1.887419, 1.560775, 3.177883, 1.609622, 2.568338, 2.874913, 2.599618, 0.743298, 0.372675, 1.017625, 1.251057, 1.518871, 1.418453, 1.138301, 1.601612, 2.081798, 2.488978, 3.318890, 0.842711, 1.897219, 2.754291, 1.532093, 0.498683, 1.097630, 0.937481, 0.462875, 0.708300, 0.744038, 0.406428, 2.015220, 2.073592, 3.798900, 1.818728, 2.326257, 2.065002, 0.346253, 1.342879, 1.281003, 1.149002, 1.894725, 2.188194, 1.123607, 2.950085, 2.620234, 1.700050, 3.765085, 2.756449, 0.713107, 3.223467, 1.161732, 1.550609, 2.177058, 2.928857, 1.658691, 1.636552, 3.186576, 3.879019, 5.258379, 2.356412, 0.546396, 2.436355, 3.133614, 4.316537, 3.747853, 3.284338, 6.323795, 2.933464, 2.863109, 7.222256, 1.059002, 3.900552, 0.221468, 0.921476, 0.119296, 1.374493, 1.973579, 1.876678, 3.350049, 0.349255, 2.975929, 1.910244, 2.331838, 1.864728, 2.839663, 1.859972, 2.920262, 1.059299, 1.932969, 2.280111, 2.489620, 3.301661, 3.192955, 4.223943, 3.218347, 0.679498, 2.185797, 2.024731, 3.309003, 2.174680, 1.623595, 0.915638, 0.527202, 0.454442, 1.942843, 1.794009, 0.387689, 0.366454, 0.592552, 0.527014, 0.168296, 1.565736, 1.873772, 2.162796, 1.722603, 0.885447, 0.119055],
                         [4.110004, 2.643812, 2.906550, 3.012880, 2.490066, 2.110272, 2.123874, 1.956158, 2.593037, 2.629937, 2.094392, 1.970073, 2.441636, 2.427529, 2.503201, 1.246657, 2.293891, 1.446624, 1.878824, 1.800077, 2.415001, 1.419531, 1.946253, 1.659640, 1.773237, 1.716116, 1.717631, 0.711002, 1.114215, 1.431002, 1.994622, 2.534528, 1.472052, 1.682421, 2.028078, 2.501742, 2.030560, 2.085602, 1.031585, 1.726025, 1.789501, 1.323692, 1.469174, 1.409283, 1.675281, 2.338140, 1.686744, 1.392664, 1.106667, 3.020196, 1.986016, 2.300303, 2.569927, 2.161064, 2.282363, 2.054638, 2.166662, 2.631562, 3.084504, 2.417336, 2.292739, 1.656802, 2.125273, 1.465774, 2.168627, 2.821903, 1.991080, 1.625223, 2.720831, 0.982068, 2.457497, 1.809833, 2.296932, 1.662875, 1.230480, 1.404428, 1.685180, 2.000305, 0.880816, 0.924539, 1.488849, 1.961499, 1.631100, 1.424231, 1.899044, 2.164733, 0.767746, 1.626030, 2.188041, 1.377764, 1.661574, 1.302274, 1.223789, 0.361489, 1.863808, 1.531104, 2.384604, 2.415869, 1.464047, 2.624134, 2.981962, 1.931425, 1.773921, 1.470197, 1.770957, 1.810756, 2.162498, 1.011867, 2.735455, 1.662868, 2.691934, 1.476922, 1.977060, 0.995688, 1.418468, 2.232672, 1.173602, 2.397597, 0.776745, 1.494549, 1.734704, 1.842151, 0.663812, 2.038208, 2.003803, 1.687824, 2.495861, 1.498666, 1.184458, 0.700763, 2.939291, 2.076806, 0.940825, 2.975441, 1.088432, 1.109896],
                         [0.606132, 0.726217, 0.624636, 0.641360, 1.054068, 1.090579, 2.042315, 0.745025, 0.994301, 1.909579, 1.393158, 0.649851, 0.375131, 1.027617, 0.780397, 0.281547, 0.733518, 1.094325, 1.145421, 0.971920, 1.325621, 1.020965, 3.166805, 1.284352, 3.266192, 4.420358, 2.839134, 0.978804, 0.256279, 0.640598, 0.923844, 1.014061, 0.972825, 0.543315, 1.352552, 2.268576, 2.500698, 4.349717, 0.786917, 1.315364, 2.397736, 0.893523, 0.333015, 0.802873, 0.589680, 0.205511, 0.557633, 0.497751, 0.195325, 1.810631, 1.802700, 4.620934, 1.300140, 2.530253, 1.417627, 0.182087, 1.132398, 0.790397, 0.546911, 1.513505, 1.510477, 0.768488, 2.458184, 3.993080, 1.189320, 4.415030, 2.381119, 0.415037, 3.067975, 0.978260, 0.712441, 1.672864, 2.239587, 1.049159, 1.081685, 3.500405, 4.526573, 7.408180, 2.614812, 0.292512, 1.824200, 3.608224, 6.367946, 5.133160, 4.390686, 8.484838, 6.895771, 2.559711, 10.776557, 1.117402, 5.330519, 0.083952, 0.745582, 0.047932, 0.850221, 1.131095, 1.599675, 3.924622, 0.143519, 2.668294, 1.282861, 2.503503, 1.632975, 2.665922, 1.350877, 3.842113, 0.689872, 2.400665, 1.923073, 3.331283, 2.504437, 3.412513, 6.433776, 6.377283, 0.526094, 1.534930, 1.579231, 3.194576, 2.455546, 1.009607, 0.583054, 0.295579, 0.462150, 1.512251, 1.710956, 0.188757, 0.162348, 0.489643, 0.348271, 0.085750, 0.992222, 1.163277, 2.751851, 1.429907, 0.927710, 0.045833]], dtype=np.float32)

cluster_for_kmer_profile = [
    (2, 4,
     np.array([1.02, 1.02, 1.02, 1.02, 1.02, 0.98, 0.98, 0.98, 0.98, 0.98, ], dtype=np.float32),
     np.array([[  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, ],
               [ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, ],
               [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
               [3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5, ],
               [  1.03,  1.03,  1.03,  1.03,  1.03,  0.97,  0.97,  0.97,  0.97,  0.97, ],
               [  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, ],
               [  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, ],
               [  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, ],
               [  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, ],
               [ -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, ]], dtype=np.float32), ),
    #           AAA,AAC,AAG,AAT,ACA,ACC,ACG,ACT,AGA,AGC,AGG,ATA,ATC,ATG,CAA,CAC,CAG,CCA,CCC,CCG,CGA,CGC,CTA,CTC,GAA,GAC,GCA,GCC,GGA,GTA,TAA,TCA
    (3, 2,
     np.array( [ -1, -2, -1, -1,  0, -1, -1, -1, -1, -3, -1, -1,1.5, -1, -1, -1, -1,-0.5,-1, -1, -1, -1, -1, -1, -1, -1, -1,0.3, -1,-1.7,-1, -1, ], dtype=np.float32),
     np.array([[  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, ],
               [  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, ],
               [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],
               [-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3.,-3., ],
               [7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2, ],
               [  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, ],
               [ 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, ],
               [-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14, ],
               [3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9, ],
               [ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, ]], dtype=np.float32), ),

    (4, 8,
     np.array([2.527881, 1.516729, 1.162825, 1.365056, 1.365056, 1.011152, 1.567286, 1.213383, 1.162825, 0.960595, 0.657249, 1.112268, 1.516729, 0.808922, 1.263941, 0.859480, 1.263941, 1.263941, 1.061710, 1.061710, 1.263941, 0.707807, 0.808922, 1.061710, 1.011152, 1.061710, 0.758364, 0.505576, 0.556134, 1.112268, 1.162825, 1.415613, 0.758364, 1.213383, 1.061710, 0.960595, 0.657249, 1.011152, 0.151673, 0.556134, 1.011152, 0.758364, 0.960595, 0.808922, 0.960595, 1.820074, 1.011152, 0.758364, 1.365056, 1.415613, 0.960595, 0.859480, 1.213383, 1.112268, 1.213383, 1.516729, 1.365056, 1.061710, 1.213383, 1.668401, 0.808922, 1.820074, 1.365056, 0.808922, 1.263941, 0.707807, 1.314498, 1.213383, 1.415613, 0.353903, 1.011152, 1.112268, 1.112268, 0.758364, 0.303346, 0.556134, 0.455019, 1.112268, 0.455019, 0.455019, 0.960595, 1.112268, 1.011152, 1.112268, 1.870632, 1.213383, 0.657249, 1.011152, 0.859480, 0.707807, 0.758364, 0.606691, 0.657249, 0.101115, 1.112268, 0.707807, 0.859480, 1.415613, 0.808922, 1.112268, 1.365056, 0.808922, 0.859480, 0.606691, 1.314498, 0.758364, 0.960595, 0.556134, 1.162825, 1.516729, 1.415613, 0.758364, 1.516729, 0.859480, 0.505576, 0.808922, 0.657249, 1.162825, 0.505576, 0.606691, 0.859480, 1.061710, 0.202230, 0.606691, 1.061710, 1.162825, 1.516729, 0.606691, 0.707807, 1.314498, 1.314498, 1.011152, 0.556134, 1.314498, 0.606691, 0.758364], dtype=np.float32),
     model_k4_b10),
    (4, 1,
     np.array([1.831650, 0.970774, 1.135623, 0.696027, 0.769293, 1.062357, 1.190572, 0.531178, 0.897508, 1.465320, 1.392054, 0.567811, 0.494545, 0.934141, 0.952458, 0.384646, 0.714343, 0.750976, 0.879192, 0.586128, 0.805926, 0.677710, 1.795017, 0.494545, 1.098990, 1.630168, 1.263838, 0.183165, 0.109899, 0.293064, 0.732660, 0.879192, 0.805926, 0.604444, 0.787609, 0.879192, 1.483636, 1.776700, 0.457912, 0.934141, 1.593535, 0.696027, 0.293064, 0.476229, 0.402963, 0.531178, 0.439596, 0.366330, 0.348013, 1.227205, 1.153939, 1.886599, 1.044040, 1.630168, 1.117306, 0.567811, 0.915825, 0.970774, 1.044040, 0.897508, 1.392054, 0.842559, 1.227205, 1.208889, 1.025724, 2.014815, 1.208889, 0.512862, 1.556902, 0.677710, 0.805926, 0.860875, 1.245522, 0.641077, 0.805926, 1.666801, 1.721751, 2.399461, 1.392054, 0.293064, 0.824242, 1.740067, 1.758384, 1.172256, 2.216296, 2.545993, 1.593535, 1.611852, 3.095488, 0.567811, 1.392054, 0.164848, 0.183165, 0.128215, 0.769293, 0.732660, 0.970774, 1.886599, 0.329697, 1.447003, 1.465320, 1.483636, 1.153939, 1.117306, 0.897508, 1.263838, 0.769293, 0.897508, 1.758384, 1.245522, 1.611852, 1.556902, 2.069764, 1.813333, 0.311380, 1.575219, 0.824242, 1.959865, 0.934141, 0.769293, 0.366330, 0.476229, 0.146532, 0.750976, 0.824242, 0.201481, 0.293064, 0.164848, 0.256431, 0.128215, 1.025724, 0.970774, 0.824242, 1.117306, 0.732660, 0.109899], dtype=np.float32),
     model_k4_b10),
]

@pytest.mark.parametrize("k, cluster, counts, centroids", cluster_for_kmer_profile)
def test_sklearn_find_cluster(k, cluster, counts, centroids):
    model = MiniBatchKMeans()
    model.cluster_centers_ = centroids
    assert cluster == model.predict(counts.reshape(-1, counts.shape[0]))[0]  # Scaling in place

@pytest.mark.parametrize("k, cluster, counts, centroids", cluster_for_kmer_profile)
def test_cyt_find_cluster(k, cluster, counts, centroids):
    cyt_ext.init_variables(k)
    assert cluster == cyt_ext.find_cluster(counts, centroids)  # Scaling in place


def test_Binner():
    # todo: should check that the cyt version finds the same bin as the sklearn KMeans
    return NotImplementedError

